[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}

    # Usa coordenadas absolutas
    G90

    # Reseta o offset do G-Code Z (ajuste se necessário)
    SET_GCODE_OFFSET Z=0.0

    # Home da impressora
    G28

    # Move o bico para perto da mesa
    G1 Z5 F3000
    G1 Z0.15 F300

    {% if EXTRUDER_TEMP < 80 %}
        # Esquenta o bico primeiro
        M104 S{EXTRUDER_TEMP}  ; Aquece sem esperar
        M140 S{BED_TEMP}       ; Aquece a mesa sem esperar
        M109 S{EXTRUDER_TEMP}  ; Aguarda o bico
    {% else %}
        # Esquenta a mesa primeiro
        M140 S{BED_TEMP}       ; Aquece a mesa sem esperar
        M104 S{EXTRUDER_TEMP}  ; Aquece o bico sem esperar
        M190 S{BED_TEMP}       ; Aguarda a mesa
        M109 S{EXTRUDER_TEMP}  ; Aguarda o bico
    {% endif %}

    # Reseta o extrusor
    G92 E0

    # Move um pouco o bico para evitar extrusão inicial
    G1 Z2.0 F3000

    # Desenha a linha de priming
    G1 X10.1 Y20 Z0.28 F5000.0 ;Move para posição inicial
    G1 X10.1 Y200.0 Z0.28 F1500.0 E15 ;Desenha a primeira linha
    G1 X10.4 Y200.0 Z0.28 F5000.0 ;Move um pouco para o lado
    G1 X10.4 Y20 Z0.28 F1500.0 E30 ;Desenha a segunda linha

    # Reseta o extrusor
    G92 E0

    # Move o bico para cima antes de iniciar a impressão
    G1 Z2.0 F3000



[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    # Disable steppers
    M84

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.cancel_retract|default(5.0)|abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  {client.user_cancel_macro|default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### get user parameters or use default ##### 
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  {client.user_pause_macro|default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %} # sensor status
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}
  {% set prompt_txt = [] %}
  ##### end of definitions #####
  #### Printer comming from timeout idle state ####
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the ° as py2 env's would throw an error otherwise 
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %} 
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      {client.user_resume_macro|default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
  {% endif %}
  ##### Generate User Information box in case of abort #####
  {% if not (runout_resume and do_resume) %} 
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}' 
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}

[gcode_macro SPEED_TEST]
description: "Speed test with customizable velocity and acceleration"
gcode:
    {% set VELOCITY = params.VELOCITY|default(500)|float %}
    {% set ACCEL = params.ACCEL|default(10000)|float %}

    {% if printer.toolhead.homed_axes|length < 3 %}
        G28
    {% endif %}

    M117 Starting speed test...
    G90                          ; Absolute positioning
    G1 Z10 F1200                 ; Raise nozzle for safety

    ; Apply temporary velocity and acceleration limits
    SET_VELOCITY_LIMIT VELOCITY={VELOCITY} ACCEL={ACCEL}

    ; Pattern 1: diagonal crossings
    G1 X10 Y10 F30000
    G1 X290 Y290 F30000
    G1 X10 Y290 F30000
    G1 X290 Y10 F30000
    G1 X150 Y150 F30000

    ; Pattern 2: horizontal sweep
    G1 Y80 F30000
    G1 X10 F30000
    G1 X290 F30000
    G1 X10 F30000
    G1 X290 F30000

    ; Pattern 3: vertical sweep
    G1 X150 F30000
    G1 Y10 F30000
    G1 Y290 F30000
    G1 Y10 F30000
    G1 Y290 F30000

    ; Pattern 4: central square repetition
    G1 X120 Y120 F30000
    G1 X180 F30000
    G1 Y180 F30000
    G1 X120 F30000
    G1 Y120 F30000

    ; Return to center
    G1 X150 Y150 F30000

    M117 Speed test completed successfully


[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% if printer.extruder.temperature < 190 %}
      M104 S200               ; Define temperatura do bico para 200°C
      M109 S200               ; Espera até o bico atingir 200°C
    {% endif %}
    M83                      ; Modo de extrusão relativa
    G1 E-150 F1000           ; Retrai 150mm a 1000mm/min

[gcode_macro LOAD_FILAMENT]
gcode:
    {% if printer.extruder.temperature < 190 %}
      M104 S200               ; Define temperatura do bico para 200°C
      M109 S200               ; Espera até o bico atingir 200°C
    {% endif %}
    M83                      ; Modo de extrusão relativa
    G1 E160 F1000            ; Extrusa 160mm a 1000mm/min
